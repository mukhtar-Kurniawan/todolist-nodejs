{"code":"!function(e){function t(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:i})},t.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&n&&\"string\"!=typeof e)for(var o in e)t.d(i,o,function(t){return e[t]}.bind(null,o));return i},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=0)}([function(e,t,n){n(1)},function(e,t,n){\"use strict\";function i(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,n){return function i(o,r){try{var u=t[o](r),l=u.value}catch(e){return void n(e)}return u.done?void e(l):Promise.resolve(l).then(function(e){i(\"next\",e)},function(e){i(\"throw\",e)})}(\"next\")})}}function o(e){return 11e3==1*e.code}function r(e,t){function n(e){return o||(o=function(e){let t;try{t=e.model(\"IdentityCounter\")}catch(n){if(\"MissingSchemaError\"!==n.name)throw n;t=e.model(\"IdentityCounter\",a)}return t}(e)),o}const i={};let o,r={migrate:!1,model:void 0,field:\"_id\",groupingField:\"\",startAt:0,incrementBy:1,unique:!0,outputFilter:void 0};switch(typeof t){case\"string\":r.model=t;break;case\"object\":r=u({},r,t)}if(\"string\"!=typeof r.model)throw new Error(\"model must be set\");if(\"_id\"===r.field&&r.groupingField.length)throw new Error(\"Cannot use a grouping field with _id, choose a different field name.\");e.path(r.field)&&\"_id\"!==r.field||e.path(r.field,Number),r.groupingField.length?(i[r.field]=1,i[r.groupingField]=1,e.index(i,{unique:r.unique})):\"_id\"!==r.field&&e.path(r.field).index({unique:r.unique}),e.method(\"nextCount\",function(e){const t=n(this.collection.conn);return c(t,r,e)}),e.static(\"nextCount\",function(e){const t=n(this.collection.conn);return c(t,r,e)}),e.method(\"resetCount\",function(e){const t=n(this.collection.conn);return f(t,r,e)}),e.static(\"resetCount\",function(e){const t=n(this.collection.conn);return f(t,r,e)}),e.pre(\"validate\",function(e){const t=this,i=!0===t.__maiRanOnce;if(t.isNew&&!i||r.migrate){const i=n(t.collection.conn);d(i,r,t,e)}else e()})}Object.defineProperty(t,\"__esModule\",{value:!0});var u=Object.assign||function(e){for(var t,n=1;n<arguments.length;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e};let l=(()=>{var e=i(function*(e,t,n){const i=n.get(t.groupingField)||\"\";let r=yield e.findOne({model:t.model,field:t.field,groupingField:i}).exec();try{r||(r=yield e.findOne({model:t.model,field:t.field,groupingField:{$exists:!1}}))&&(r.groupingField=\"\",yield r.save()),r||(r=new e({model:t.model,field:t.field,groupingField:i,count:t.startAt-t.incrementBy}),yield r.save())}catch(e){if(o(e))return;throw e}});return function(){return e.apply(this,arguments)}})(),d=(()=>{var e=i(function*(e,t,n,i,r=0){try{if(r||(yield l(e,t,n)),\"number\"==typeof n.get(t.field))yield e.findOneAndUpdate({model:t.model,field:t.field,groupingField:n.get(t.groupingField)||\"\",count:{$lt:n.get(t.field)}},{count:n.get(t.field)}).exec();else{const i=yield e.findOneAndUpdate({model:t.model,field:t.field,groupingField:n.get(t.groupingField)||\"\"},{$inc:{count:t.incrementBy}},{new:!0}).exec();if(!i)throw new Error(`MongooseAutoInc cannot update counter for ${t.model}`);let o=i.count;\"function\"==typeof t.outputFilter&&(o=t.outputFilter(o)),n.set(t.field,o),n.__maiRanOnce=!0}i()}catch(u){o(u)&&10>1*r?setTimeout(function(){return d(e,t,n,i,r+1)},5):i(u)}});return function(){return e.apply(this,arguments)}})(),c=(()=>{var e=i(function*(e,t,n){const i=yield e.findOne({model:t.model,field:t.field,groupingField:n||\"\"}).exec();return i?i.count+t.incrementBy:t.startAt});return function(){return e.apply(this,arguments)}})(),f=(()=>{var e=i(function*(e,t,n){return yield e.findOneAndUpdate({model:t.model,field:t.field,groupingField:n||\"\"},{count:t.startAt-t.incrementBy},{new:!0}).exec(),t.startAt});return function(){return e.apply(this,arguments)}})();t.initialize=function(){console.log(\"MongooseAutoIncrement.initialize() method is deprecated. Just remove this method, it not required anymore.\")},t.autoIncrement=r,t.plugin=function(e,t){return r(e,t)};const a=new(function(e){return e&&e.__esModule?e:{default:e}}(n(2)).default.Schema)({model:{type:String,required:!0},field:{type:String,required:!0},groupingField:{type:String,default:\"\"},count:{type:Number,default:0}});a.index({field:1,groupingField:1,model:1},{unique:!0}),t.default=r},function(e){e.exports=mongoose}]);","extractedComments":[]}